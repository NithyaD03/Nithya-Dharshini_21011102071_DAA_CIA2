import random
import numpy as np
n_cities = 10
cities = np.random.rand(n_cities, 2)
pop_size = 100
n_gen = 100
mutation_rate = 0.1
def create_chromosome(n_cities):
    cities = list(range(n_cities))
    random.shuffle(cities)
    return cities

def evaluate_fitness(chromosome, cities):
    dist = 0
    for i in range(len(chromosome)):
        j = (i + 1) % len(chromosome)
        city_i, city_j = chromosome[i], chromosome[j]
        dist += np.linalg.norm(cities[city_i] - cities[city_j])
    return dist
pop = [create_chromosome(n_cities) for _ in range(pop_size)]
for generation in range(n_gen):
    fitness = [evaluate_fitness(chromosome, cities) for chromosome in pop]
    idx = np.argsort(fitness)
    selected_pop = [pop[i] for i in idx[:pop_size//2]]
    new_pop = []
    while len(new_pop) < pop_size:
        parent1, parent2 = random.sample(selected_pop, 2)
        child = parent1.copy()
        start, end = sorted(random.sample(range(n_cities), 2))
        for i in range(start, end + 1):
            if parent2[i] not in child[start:end+1]:
                idx = child.index(parent2[i])
                child[i], child[idx] = child[idx], child[i]
        new_pop.append(child)

    for i in range(len(new_pop)):
        if random.random() < mutation_rate:
            idx1, idx2 = random.sample(range(n_cities), 2)
